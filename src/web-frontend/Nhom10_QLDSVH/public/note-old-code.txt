import React, { useEffect } from 'react';
import * as THREE from 'three';
import { OBJLoader } from 'three/addons/loaders/OBJLoader';
import { ref, getDownloadURL } from 'firebase/storage';
import { storage } from '../../../firebase.js';

const ModelView = () => {
  useEffect(() => {
    const loadModel = async () => {
      const scene = new THREE.Scene();
      const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
      camera.position.z = 5;

      const renderer = new THREE.WebGLRenderer();
      renderer.setSize(window.innerWidth, window.innerHeight);
      const container = document.getElementById('3d-container');
      container.appendChild(renderer.domElement);

      // Ambient light
      const ambientLight = new THREE.AmbientLight(0xffffff, 1); // White light
      scene.add(ambientLight);

      const loader = new OBJLoader();

      try {
        const downloadUrl = await getDownloadURL(ref(storage, 'models/Jar.obj'));
        const response = await fetch(downloadUrl);
        const text = await response.text();

        const material = new THREE.MeshBasicMaterial({ color: 0xffffff }); // White material

        loader.parse(
          text,
          (object) => {
            object.traverse((child) => {
              if (child instanceof THREE.Mesh) {
                child.material = material;
              }
            });

            // Adjust the scale as needed
            object.scale.set(0.1, 0.1, 0.1);

            scene.add(object);
          },
          undefined,
          (error) => {
            console.error('Error loading 3D model:', error);
          }
        );
      } catch (error) {
        console.error('Error fetching or loading the model:', error);
      }

      const animate = () => {
        requestAnimationFrame(animate);
        renderer.render(scene, camera);
      };

      animate();

      // Cleanup on component unmount
      return () => {
        container.removeChild(renderer.domElement);
      };
    };

    // Call the async function
    loadModel();
  }, []);

  return <div id="3d-container" />;
};

export default ModelView;
